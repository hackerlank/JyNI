#
# This is an experimental makefile for JyNI on OSX.
#
# Author: Jonathan Hale, Stefan Richthofer, Malte Darnst√§dt
#

CC = gcc
JC = javac
JAVA = java
OUTPUTDIR = ./build

# Adjust the following line to point to Jython 2.7
JYTHON = ./jython.jar
# for instance, if you extracted it to your home folder:
# JYTHON = /home/your_name/jython.jar

# Adjust the path below to match your system, if not yet appropriate
JAVA_HOME ?= /Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home

PLATFORM = darwin

JYNI = ./JyNI-Java/src
JYNIBIN = ./JyNI-Java/bin

INCLUDES = -I./JyNI-C/include -I./JyNI-C/include/Python_JyNI -I./JyNI-Java/include -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/$(PLATFORM) `python2.7-config --includes`

CFLAGS = -std=gnu89 -fPIC -Wl,--add-stdcall-alias -c $(INCLUDES)

LDFLAGS = -shared -undefined dynamic_lookup
# You can optionally remove -source 1.7 -target 1.7. It's purpose is to achieve maximal compatibility by default.
JFLAGS= -cp $(JYTHON):$(JYNI) -d $(JYNIBIN) -source 1.7 -target 1.7

SOURCES = $(wildcard JyNI-C/src/*.c) $(wildcard JyNI-C/src/Python/*.c) $(wildcard JyNI-C/src/Objects/*.c) $(wildcard JyNI-C/src/Modules/*.c)
OBJECTS = $(SOURCES:.c=.o)
JSOURCES = $(wildcard JyNI-Java/src/JyNI/*.java) $(wildcard JyNI-Java/src/JyNI/gc/*.java)

all: $(OUTPUTDIR) libJyNI libJyNI-Loader JyNI
	@echo ''
	@echo 'Build successful.'

$(OUTPUTDIR):
	mkdir $(OUTPUTDIR)

.o:
	$(CC) $(CFLAGS) $< -o $@

$(JYTHON):
	@echo ''
	@echo '------------------------------------------------'
	@echo 'Fatal error: Could not find jython.jar.'
	@echo 'Either put jython.jar into the JyNI base folder,
	@echo 'or adjust the JYTHON-variable at the top of'
	@echo 'makefile to point to your installed jython.jar.'
	@echo 'Be sure to use Jython 2.7.1 or newer.'
	@echo '------------------------------------------------'
	@echo ''
	@false

JAVA_HOME_hint:
ifeq "$(wildcard $(JAVA_HOME) )" ""
	@echo 'Getting JAVA_HOME from java...'
	@echo 'To avoid this extra startup-time, set JAVA_HOME explicitly, e.g.'
	@echo 'export JAVA_HOME='"'"'/usr/lib/jvm/java-7-openjdk-amd64'"'"
endif

# We could inline JAVA_HOME_hint into this recipe, but then it wouldn't be flushed before the user waits during the startup-time.
# But the text is actually intended to be read by the user during this time. So we make it a separate recipe to force flushing.
$(JAVA_HOME): JAVA_HOME_hint $(JYTHON)
# For some reason make doesn't recognize $(JAVA_HOME) as existing, even if it exists (maybe because it's a symlink?, but we
# frequently tested with jython.jar being a symlink too and it worked. Maybe because it's no subpath of workdir?)
# However this additional check ensures it is only executed if needed.
ifeq "$(wildcard $(JAVA_HOME) )" ""
	$(eval JAVA_HOME = $(shell $(JAVA) -jar $(JYTHON) -c "from java.lang import System; print System.getProperty('java.home')[:-4]"))
endif

libJyNI: $(JAVA_HOME) $(OBJECTS)
	$(CC) $(LDFLAGS) $(OBJECTS) -o $(OUTPUTDIR)/libJyNI.so

libJyNI-Loader: $(JAVA_HOME) ./JyNI-Loader/JyNILoader.o
	$(CC) $(LDFLAGS) ./JyNI-Loader/JyNILoader.o -o $(OUTPUTDIR)/libJyNI-Loader.so

$(JYNIBIN):
	mkdir $(JYNIBIN)

$(JYNIBIN)/JyNI: $(JYNIBIN)
	$(JC) $(JFLAGS) $(JSOURCES)

$(JYNIBIN)/Lib: $(JYNIBIN)
	cp -r JyNI-Lib/* $(JYNIBIN)
	$(JAVA) -cp $(JYTHON) org.python.util.jython -c "import compileall; compileall.compile_dir('$(JYNIBIN)')"

JyNI: $(JYTHON) $(JYNIBIN)/JyNI $(JYNIBIN)/Lib
	cp -r JyNI-Java/META-INF $(JYNIBIN)
	jar cvf $(OUTPUTDIR)/JyNI.jar -C $(JYNIBIN) .

cleanJ:
	rm -rf $(JYNIBIN)

clean:
	rm -rf $(JYNIBIN)
	rm -f ./JyNI-C/src/*.o
	rm -f ./JyNI-C/src/Python/*.o
	rm -f ./JyNI-C/src/Objects/*.o
	rm -f ./JyNI-C/src/Modules/*.o
	rm -f ./JyNI-Loader/JyNILoader.o

.PHONY: JyNI libJyNI libJyNI-Loader clean cleanJ JAVA_HOME_hint all

